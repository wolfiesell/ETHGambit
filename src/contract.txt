// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

contract Escrow {

    enum ArbitratorDecision { White, Black, Draw }

    struct Agreement {
        address bob;
        address alice;
        ArbitratorDecision arbitratorDecision; // Replace arbitrator with a decision
        uint amount;
        bool bobIn;
        bool aliceIn;
    }

    Agreement[] public agreements;

    function newAgreement(address _bob, address _alice, uint _amount) external returns (uint) {
        require(_bob != _alice, "same buyer and seller");
        agreements.push(Agreement(_bob, _alice, ArbitratorDecision.Draw, _amount, false, false)); // Set initial arbitrator decision to Draw
        return agreements.length - 1;
    }

    

        // Returns the last item in the agreements array
    function lastAgreement() public view returns (Agreement memory) {
        require(agreements.length > 0, "No agreements found");
        return agreements[agreements.length - 1];
    }

    function deposit(uint _id) external payable {
        if (msg.sender == agreements[_id].bob && msg.value == agreements[_id].amount) {
            agreements[_id].bobIn = true;
        }
        else if (msg.sender == agreements[_id].alice && msg.value == agreements[_id].amount) {
            agreements[_id].aliceIn = true;
        }
    }

    function refund(uint _id) external {
        if (msg.sender == agreements[_id].bob && agreements[_id].bobIn == true) {
            agreements[_id].bobIn = false;
            payable(agreements[_id].bob).transfer(agreements[_id].amount);
        }
        if (msg.sender == agreements[_id].alice && agreements[_id].aliceIn == true) {
            agreements[_id].aliceIn = false;
            payable(agreements[_id].alice).transfer(agreements[_id].amount);
        }
    }

    function complete(uint _id, ArbitratorDecision _decision) external {
        // Set the arbitrator decision to the provided value (White, Black, or Draw)
        agreements[_id].arbitratorDecision = _decision;

        // Proceed to distribute the funds based on the decision
        if (agreements[_id].bobIn == true && agreements[_id].aliceIn == true) {
            if (_decision == ArbitratorDecision.White) {
                // Bob wins, refund Alice
                agreements[_id].bobIn = false;
                agreements[_id].aliceIn = false;
                payable(agreements[_id].bob).transfer(agreements[_id].amount * 2);
            } 
            else if (_decision == ArbitratorDecision.Black) {
                // Alice wins, refund Bob
                agreements[_id].bobIn = false;
                agreements[_id].aliceIn = false;
                payable(agreements[_id].alice).transfer(agreements[_id].amount * 2);
            } 
            else if (_decision == ArbitratorDecision.Draw) {
                // Draw, refund both
                agreements[_id].bobIn = false;
                agreements[_id].aliceIn = false;
                payable(agreements[_id].bob).transfer(agreements[_id].amount);
                payable(agreements[_id].alice).transfer(agreements[_id].amount);
            }
        }
    }
}
